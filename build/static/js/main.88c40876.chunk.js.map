{"version":3,"sources":["components/jokes/Joke/Joke.js","components/jokes/Jokes.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","className","question","answer","onClick","changeNumber","Jokes","url","useState","Math","round","random","number","setNumber","perg","resp","jokes","setJokes","useEffect","a","axios","get","AllJokes","data","length","loadJokes","changeNumberHandler","map","joke","idx","console","log","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAYeA,EAVF,SAACC,GACV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,UACX,2BAAIF,EAAMG,QACV,4BAAQC,QAASJ,EAAMK,cAAvB,kBC+BGC,EAjCD,SAACN,GAEb,IAAMO,EAAM,oDAFW,EAGKC,mBAASC,KAAKC,MAAoB,IAAdD,KAAKE,WAH9B,mBAGhBC,EAHgB,KAGRC,EAHQ,OAIGL,mBAAS,CAAC,CAACM,KAAK,GAAGC,KAAK,MAJ3B,mBAIhBC,EAJgB,KAITC,EAJS,KAMvBC,qBAAU,WAAI,4CACZ,4BAAAC,EAAA,sEACyBC,IAAMC,IAAId,GADnC,OACQe,EADR,OAEEL,EAASK,EAASC,MAClBV,EAAUJ,KAAKC,MAAMD,KAAKE,UAAYW,EAASC,KAAKC,OAAO,KAH7D,4CADY,uBAAC,WAAD,wBAMZC,KACA,IAGF,IAAMC,EAAsB,WAC1Bb,EAAUJ,KAAKC,MAAMD,KAAKE,SAAWK,EAAMQ,UAG7C,OACER,EAAMW,KAAI,SAACC,EAAKC,GACd,OAAGA,IAAMjB,IACPkB,QAAQC,IAAInB,GACL,kBAAC,EAAD,CAAMoB,IAAKH,EAAK3B,SAAU0B,EAAKd,KAAMX,OAAQyB,EAAKb,KAAMV,aAAcqB,S,MChBtEO,MARf,WACE,OACE,yBAAKhC,UAAU,OACd,kBAAC,EAAD,QCIeiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.88c40876.chunk.js","sourcesContent":["import React from 'react'\n\nconst Joke = (props)=>{\n    return (\n        <div className=\"joke\">\n            <h2>{props.question}</h2>\n            <p>{props.answer}</p>\n            <button onClick={props.changeNumber}>Nova charada</button>\n        </div>\n    )\n}\n\nexport default Joke\n","import React, { useState,useEffect } from 'react'\nimport axios from 'axios'\n\nimport Joke from './Joke/Joke'\n\nconst Jokes = (props) => {\n  // const url = \"https://cors-anywhere.herokuapp.com/https://slicedpixel.com/apps/jokes/jokes.json\"\n  const url = \"https://www.slicedpixel.com/apps/jokes/jokes.json\"\n  const [number, setNumber] = useState(Math.round(Math.random()*100));\n  const [jokes, setJokes] = useState([{perg:\"\",resp:\"\"}])\n\n  useEffect(()=>{\n    async function loadJokes(){\n      const AllJokes = await axios.get(url)\n      setJokes(AllJokes.data)\n      setNumber(Math.round(Math.random() * (AllJokes.data.length-1)))\n    }\n    loadJokes()\n  },[])\n\n\n  const changeNumberHandler = () => {\n    setNumber(Math.round(Math.random() * jokes.length))\n  }\n\n  return (\n    jokes.map((joke,idx)=>{\n      if(idx===number){\n        console.log(number)\n        return <Joke key={idx} question={joke.perg} answer={joke.resp} changeNumber={changeNumberHandler} />\n      } else{\n        return false\n      }\n    })\n    \n  )\n}\n\nexport default Jokes\n","import React from 'react';\nimport Jokes from './components/jokes/Jokes';\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Jokes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}